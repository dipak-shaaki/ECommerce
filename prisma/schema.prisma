// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Remove the output path - let Prisma use the default location
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  prescriptions Prescription[]
  cart          Cart?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  fullName   String
  address    String
  city       String
  state      String?
  zipCode    String
  country    String  @default("United States")
  phone      String
  isDefault  Boolean @default(false)
  
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Decimal   @db.Decimal(10, 2)
  compareAtPrice  Decimal?  @db.Decimal(10, 2)
  sku             String?   @unique
  barcode         String?
  inventory       Int       @default(0)
  requiresPrescription Boolean @default(false)
  images          String[]
  categoryId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  category        Category  @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  cartItems       CartItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Cart {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  userId          String
  addressId       String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingMethod  String?
  shippingCost    Decimal   @db.Decimal(10, 2)
  subtotal        Decimal   @db.Decimal(10, 2)
  total           Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  discount        Decimal?  @db.Decimal(10, 2)
  notes           String?
  trackingNumber  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])
  address         Address   @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  prescriptions   OrderPrescription[]
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productId   String
  name        String
  price       Decimal   @db.Decimal(10, 2)
  quantity    Int
  requiresPrescription Boolean @default(false)
  
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])
}

model Prescription {
  id          String    @id @default(cuid())
  userId      String
  image       String
  status      PrescriptionStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderPrescriptions OrderPrescription[]
}

model OrderPrescription {
  id              String    @id @default(cuid())
  orderId         String
  prescriptionId  String

  order           Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  prescription    Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@unique([orderId, prescriptionId])
}

enum Role {
  ADMIN
  PHARMACIST
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}
